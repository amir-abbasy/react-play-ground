import React, { useEffect, useRef, useState } from 'react';

import data from './data.json';
const candleStickData = data.slice(0, 1000).map(_ => ({
  time: _[0],
  open: _[1],
  high: _[2],
  low: _[3],
  close: _[4]
}));


const Chart = ({ data = [] }) => {
  const canvasRef = useRef(null);
  const [chartOffsetX, setChartOffsetX] = useState(0);
  const [zoomFactor, setZoomFactor] = useState(1);
  const [isDragging, setIsDragging] = useState(false);
  const [startDragX, setStartDragX] = useState(0);
  const [canvasWidth, setCanvasWidth] = useState(window.innerWidth);
  const [canvasHeight, setCanvasHeight] = useState(window.innerHeight);

  // Calculate SMA
  const calculateSMA = (period) => {
    const sma = [];
    for (let i = 0; i < data.length; i++) {
      if (i < period - 1) {
        sma.push(null);
        continue;
      }

      let sum = 0;
      for (let j = 0; j < period; j++) {
        sum += data[i - j].close;
      }
      sma.push(sum / period);
    }
    return sma;
  };

  const sma20 = calculateSMA(20);

  useEffect(() => {
    const handleResize = () => {
      setCanvasWidth(window.innerWidth);
      setCanvasHeight(window.innerHeight);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const renderChart = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;

    const padding = { top: 50, right: 60, bottom: 50, left: 60 };
    const chartWidth = canvasWidth - padding.left - padding.right;
    const chartHeight = canvasHeight - padding.top - padding.bottom;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw chart background
    ctx.fillStyle = '#f8f9fa';
    ctx.fillRect(padding.left, padding.top, chartWidth, chartHeight);

    const candleWidth = 10 * zoomFactor;
    const margin = 1;
    const totalCandleWidth = candleWidth + margin;

    const startIndex = Math.floor(chartOffsetX / totalCandleWidth);
    const maxVisibleCandles = Math.ceil(chartWidth / totalCandleWidth);

    // Calculate price range for visible data
    const visibleData = data.slice(
      Math.max(0, startIndex),
      Math.min(data.length, startIndex + maxVisibleCandles)
    );

    const highPrice = Math.max(...visibleData.map((d) => d.high));
    const lowPrice = Math.min(...visibleData.map((d) => d.low));
    const priceRange = (highPrice - lowPrice) * 1.1; // Add 10% padding

    // Draw price axis (Y-axis)
    ctx.beginPath();
    ctx.strokeStyle = '#dedede';
    const priceLines = 10;
    for (let i = 0; i <= priceLines; i++) {
      const y = padding.top + (i * chartHeight) / priceLines;
      const price = highPrice - (i * priceRange) / priceLines;

      ctx.moveTo(padding.left, y);
      ctx.lineTo(canvasWidth - padding.right, y);

      // Price labels
      ctx.fillStyle = '#666';
      ctx.font = '12px Arial';
      ctx.textAlign = 'right';
      ctx.fillText(price.toFixed(2), padding.left - 5, y + 4);
    }
    ctx.stroke();

    // Draw time axis (X-axis)
    const timeInterval = Math.ceil(maxVisibleCandles / 10);
    ctx.beginPath();
    ctx.strokeStyle = '#dedede';

    for (let i = startIndex; i < startIndex + maxVisibleCandles; i += timeInterval) {
      if (i >= 0 && i < data.length) {
        const x = canvasWidth - (i * totalCandleWidth) + chartOffsetX;
        if (x >= padding.left && x <= canvasWidth - padding.right) {
          ctx.moveTo(x, padding.top);
          ctx.lineTo(x, canvasHeight - padding.bottom);

          // Time labels
          const date = new Date(data[i].time);
          const timeLabel = date.toLocaleDateString();
          ctx.fillStyle = '#666';
          ctx.font = '12px Arial';
          ctx.textAlign = 'center';
          ctx.fillText(timeLabel, x, canvasHeight - padding.bottom + 20);
        }
      }
    }
    ctx.stroke();

    // Draw candles
    for (let index = 0; index < maxVisibleCandles; index++) {
      const dataIndex = index + startIndex;
      if (dataIndex < 0 || dataIndex >= data.length) continue;

      const candleData = data[dataIndex];
      const x = canvasWidth - ((index + startIndex) * totalCandleWidth) + chartOffsetX;

      if (x < padding.left || x > canvasWidth - padding.right) continue;

      const yHigh = padding.top + ((highPrice - candleData.high) / priceRange) * chartHeight;
      const yLow = padding.top + ((highPrice - candleData.low) / priceRange) * chartHeight;
      const yOpen = padding.top + ((highPrice - candleData.open) / priceRange) * chartHeight;
      const yClose = padding.top + ((highPrice - candleData.close) / priceRange) * chartHeight;

      // Draw high-low line
      ctx.beginPath();
      ctx.moveTo(x + candleWidth / 2, yHigh);
      ctx.lineTo(x + candleWidth / 2, yLow);
      ctx.strokeStyle = candleData.close > candleData.open ? '#26a69a' : '#ef5350';
      ctx.stroke();

      // Draw candle body
      ctx.beginPath();
      ctx.rect(x, Math.min(yOpen, yClose), candleWidth, Math.abs(yClose - yOpen));
      ctx.fillStyle = candleData.close > candleData.open ? '#26a69a' : '#ef5350';
      ctx.fill();
    }

    // Draw SMA line
    ctx.beginPath();
    ctx.strokeStyle = '#2196F3';
    ctx.lineWidth = 2;

    for (let index = 0; index < maxVisibleCandles; index++) {
      const dataIndex = index + startIndex;
      if (dataIndex < 0 || dataIndex >= data.length || !sma20[dataIndex]) continue;

      const x = canvasWidth - ((index + startIndex) * totalCandleWidth) + chartOffsetX;
      if (x < padding.left || x > canvasWidth - padding.right) continue;

      const y = padding.top + ((highPrice - sma20[dataIndex]) / priceRange) * chartHeight;

      if (index === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    }
    ctx.stroke();
    ctx.lineWidth = 1;

    // Draw chart border
    ctx.strokeStyle = '#dedede';
    ctx.strokeRect(padding.left, padding.top, chartWidth, chartHeight);
  };

  const handleMouseDown = (e) => {
    setIsDragging(true);
    setStartDragX(e.clientX);
  };

  const handleMouseMove = (e) => {
    if (isDragging) {
      const deltaX = e.clientX - startDragX;
      setChartOffsetX((prevOffsetX) => prevOffsetX + deltaX);
      setStartDragX(e.clientX);
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleWheel = (e) => {
    e.preventDefault();
    if (e.deltaY < 0) {
      setZoomFactor((prevZoom) => Math.min(prevZoom * 1.1, 3));
    } else {
      setZoomFactor((prevZoom) => Math.max(prevZoom / 1.1, 0.1));
    }
  };

  useEffect(() => {
    renderChart();
  }, [chartOffsetX, zoomFactor, canvasWidth, canvasHeight]);

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.addEventListener('mousedown', handleMouseDown);
    canvas.addEventListener('mousemove', handleMouseMove);
    canvas.addEventListener('mouseup', handleMouseUp);
    canvas.addEventListener('wheel', handleWheel);

    return () => {
      canvas.removeEventListener('mousedown', handleMouseDown);
      canvas.removeEventListener('mousemove', handleMouseMove);
      canvas.removeEventListener('mouseup', handleMouseUp);
      canvas.removeEventListener('wheel', handleWheel);
    };
  }, [isDragging, chartOffsetX]);

  return (
    <div className="relative w-full h-full">
      <canvas
        ref={canvasRef}
        className="w-full h-full"
      />
    </div>
  );
};

function App() {
  return (
    <div className="App">
      <Chart data={candleStickData} />
    </div>
  );
}

export default App;
