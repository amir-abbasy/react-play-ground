import React, { useEffect, useRef, useState } from 'react';
import data from './data.json';
const candleStickData = data.slice(0, 1000).map(_ => ({
  time: _[0],
  open: _[1],
  high: _[2],
  low: _[3],
  close: _[4]
}));

const Chart = ({ data = [] }) => {
  const ohlcvData = data;
  const canvasRef = useRef(null);
  const [chartOffsetX, setChartOffsetX] = useState(0);
  const [zoomFactor, setZoomFactor] = useState(1);
  const [isDragging, setIsDragging] = useState(false);
  const [startDragX, setStartDragX] = useState(0);

  // console.log({chartOffsetX, startDragX});


  const [canvasWidth, setCanvasWidth] = useState(window.innerWidth);
  const [canvasHeight, setCanvasHeight] = useState(window.innerHeight);

  // Dynamic resizing of canvas
  useEffect(() => {
    const handleResize = () => {
      setCanvasWidth(window.innerWidth);
      setCanvasHeight(window.innerHeight);
    };

    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  const renderChart = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
  
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  
    const candleWidth = 10 * zoomFactor;
    const margin = 1;
    const totalCandleWidth = candleWidth + margin;
  
    // Calculate the starting index based on chartOffsetX
    const startIndex = Math.floor(chartOffsetX / totalCandleWidth);
    const maxVisibleCandles = Math.ceil(canvasWidth / totalCandleWidth);
  
    // Get the high and low values for the visible candles
    const visibleCandles = ohlcvData.slice(
      Math.max(0, startIndex),
      Math.min(ohlcvData.length, startIndex + maxVisibleCandles)
    );
  
    if (visibleCandles.length === 0) return;
  
    const highPrice = Math.max(...visibleCandles.map((data) => data.high));
    const lowPrice = Math.min(...visibleCandles.map((data) => data.low));
    const priceRange = highPrice - lowPrice;
  
    // Adjust the chart based on the visible candles' price range
    const yScale = canvasHeight / priceRange;
  
    // Render visible candles
    for (let index = 0; index < maxVisibleCandles; index++) {
      const dataIndex = index + startIndex;
      if (dataIndex < 0 || dataIndex >= ohlcvData.length) continue; // Skip out-of-bounds data
  
      const data = ohlcvData[dataIndex];
      const x = canvasWidth - ((index + startIndex) * totalCandleWidth) + chartOffsetX;
  
      const yHigh = canvasHeight - (data.high - lowPrice) * yScale;
      const yLow = canvasHeight - (data.low - lowPrice) * yScale;
      const yOpen = canvasHeight - (data.open - lowPrice) * yScale;
      const yClose = canvasHeight - (data.close - lowPrice) * yScale;
  
      // Draw high-low line
      ctx.beginPath();
      ctx.moveTo(x + candleWidth / 2, yHigh);
      ctx.lineTo(x + candleWidth / 2, yLow);
      ctx.strokeStyle = '#000';
      ctx.stroke();
  
      // Draw open-close rectangle
      ctx.beginPath();
      ctx.rect(x, Math.min(yOpen, yClose), candleWidth, Math.abs(yClose - yOpen));
      ctx.fillStyle = data.close > data.open ? 'green' : 'red';
      ctx.fill();
    }
  };
  
  
  
  
  
  
  const handleMouseDown = (e) => {
    setIsDragging(true);
    setStartDragX(e.clientX);
  };

  const handleMouseMove = (e) => {
    if (isDragging) {
      const deltaX = e.clientX - startDragX;
      setChartOffsetX((prevOffsetX) => prevOffsetX + deltaX); // Adjust offset dynamically
      setStartDragX(e.clientX);
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };
  // Handle mouse scroll event for zooming
  const handleWheel = (e) => {
    e.preventDefault();
    if (e.deltaY < 0) {
      setZoomFactor((prevZoom) => Math.min(prevZoom * 1.1, 3)); // Zoom in with limit
    } else {
      setZoomFactor((prevZoom) => Math.max(prevZoom / 1.1, 0.1)); // Zoom out with limit
    }
  };

  // Use effect to render chart initially
  useEffect(() => {
    renderChart();
  }, [chartOffsetX, zoomFactor, canvasWidth, canvasHeight]);

  // Attach event listeners to the canvas
  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.addEventListener('mousedown', handleMouseDown);
    canvas.addEventListener('mousemove', handleMouseMove);
    canvas.addEventListener('mouseup', handleMouseUp);
    canvas.addEventListener('wheel', handleWheel);

    return () => {
      canvas.removeEventListener('mousedown', handleMouseDown);
      canvas.removeEventListener('mousemove', handleMouseMove);
      canvas.removeEventListener('mouseup', handleMouseUp);
      canvas.removeEventListener('wheel', handleWheel);
    };
  }, [isDragging, chartOffsetX]);

  return <canvas ref={canvasRef}></canvas>;
};

function App() {
  return (
    <div className="App">
      <Chart data={candleStickData} />
    </div>
  );
}

export default App;
